### Brute Force & Exhaustive Search

**Brute Force Approach:**
- The brute force approach is a straightforward method of solving problems by trying all possible solutions and selecting the best one.
- It is simple to understand and implement but can be inefficient for large problem sizes due to its high computational cost.

### Selection Sort and Bubble Sort

**Selection Sort:**
- Selection Sort is a comparison-based sorting algorithm.
- It repeatedly selects the smallest (or largest) element from the unsorted part of the array and swaps it with the first unsorted element.
- **Time Complexity**: O(n^2)

**Example**:
```plaintext
Unsorted Array: [64, 25, 12, 22, 11]
Step 1: [11, 25, 12, 22, 64]
Step 2: [11, 12, 25, 22, 64]
Step 3: [11, 12, 22, 25, 64]
Step 4: [11, 12, 22, 25, 64]
Sorted Array: [11, 12, 22, 25, 64]
```

**Bubble Sort:**
- Bubble Sort is another comparison-based sorting algorithm.
- It repeatedly steps through the list, compares adjacent elements, and swaps them if they are in the wrong order.
- The process repeats until the list is sorted.
- **Time Complexity**: O(n^2)

**Example**:
```plaintext
Unsorted Array: [64, 34, 25, 12, 22, 11, 90]
Step 1: [34, 25, 12, 22, 11, 64, 90]
Step 2: [25, 12, 22, 11, 34, 64, 90]
Step 3: [12, 22, 11, 25, 34, 64, 90]
Step 4: [12, 11, 22, 25, 34, 64, 90]
Step 5: [11, 12, 22, 25, 34, 64, 90]
Sorted Array: [11, 12, 22, 25, 34, 64, 90]
```

### Sequential Search

- Sequential search (or linear search) is a method for finding an element within a list.
- It checks each element of the list one by one until a match is found or the whole list has been searched.
- **Time Complexity**: O(n)

### Exhaustive Search

**Travelling Salesman Problem (TSP):**
- The Travelling Salesman Problem aims to find the shortest possible route that visits each city exactly once and returns to the origin city.
- Exhaustive search for TSP involves checking all possible permutations of cities to determine the shortest route.
- **Time Complexity**: O(n!)

**Knapsack Problem:**
- The Knapsack Problem involves selecting items with given weights and values to maximize the total value without exceeding the weight limit of the knapsack.
- Exhaustive search for the knapsack problem involves evaluating all possible combinations of items.
- **Time Complexity**: O(2^n)

### Depth First Search (DFS)

- DFS is a graph traversal algorithm that starts at a given node and explores as far as possible along each branch before backtracking.
- **Applications**: Pathfinding, topological sorting, cycle detection.
- **Time Complexity**: O(V + E), where V is the number of vertices and E is the number of edges.

**Example**:
```plaintext
1. Start at the root node.
2. Explore each branch by going as deep as possible.
3. Backtrack when no further nodes can be visited.
```

### Breadth First Search (BFS)

- BFS is a graph traversal algorithm that starts at a given node and explores all its neighboring nodes at the present depth before moving on to nodes at the next depth level.
- **Applications**: Shortest path in unweighted graphs, level-order traversal.
- **Time Complexity**: O(V + E), where V is the number of vertices and E is the number of edges.

**Example**:
```plaintext
1. Start at the root node.
2. Explore all neighboring nodes.
3. Move to the next level and explore all their neighboring nodes.
```

These notes provide an overview of the brute force approach, various sorting and searching algorithms, and graph traversal techniques. If you need more details or have specific questions, feel free to ask! ðŸ˜ŠðŸ“˜ðŸ“Š